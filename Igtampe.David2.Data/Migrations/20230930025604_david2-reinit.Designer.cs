// <auto-generated />
using System;
using Igtampe.David2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Igtampe.David2.Data.Migrations
{
    [DbContext(typeof(DavidContext))]
    [Migration("20230930025604_david2-reinit")]
    partial class david2reinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CharacterCommission", b =>
                {
                    b.Property<Guid>("CharactersID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommissionsID")
                        .HasColumnType("uuid");

                    b.HasKey("CharactersID", "CommissionsID");

                    b.HasIndex("CommissionsID");

                    b.ToTable("CharacterCommission (Dictionary<string, object>)");
                });

            modelBuilder.Entity("CommissionTag", b =>
                {
                    b.Property<Guid>("CommissionsID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsID")
                        .HasColumnType("uuid");

                    b.HasKey("CommissionsID", "TagsID");

                    b.HasIndex("TagsID");

                    b.ToTable("CommissionTag (Dictionary<string, object>)");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Artist", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Character", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Commission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArtistID")
                        .HasColumnType("uuid");

                    b.Property<int>("BodyType")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ColorType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ArtistID");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("Commission");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Igtampe.David2.Common.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CharacterCommission", b =>
                {
                    b.HasOne("Igtampe.David2.Common.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Igtampe.David2.Common.Commission", null)
                        .WithMany()
                        .HasForeignKey("CommissionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommissionTag", b =>
                {
                    b.HasOne("Igtampe.David2.Common.Commission", null)
                        .WithMany()
                        .HasForeignKey("CommissionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Igtampe.David2.Common.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Igtampe.David2.Common.Artist", b =>
                {
                    b.HasOne("Igtampe.David2.Common.User", "Owner")
                        .WithMany("Artists")
                        .HasForeignKey("OwnerUsername");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Character", b =>
                {
                    b.HasOne("Igtampe.David2.Common.User", "Owner")
                        .WithMany("Characters")
                        .HasForeignKey("OwnerUsername");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Commission", b =>
                {
                    b.HasOne("Igtampe.David2.Common.Artist", "Artist")
                        .WithMany("Commissions")
                        .HasForeignKey("ArtistID");

                    b.HasOne("Igtampe.David2.Common.User", "Owner")
                        .WithMany("Commissions")
                        .HasForeignKey("OwnerUsername");

                    b.Navigation("Artist");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Tag", b =>
                {
                    b.HasOne("Igtampe.David2.Common.User", "Owner")
                        .WithMany("Tags")
                        .HasForeignKey("OwnerUsername");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Igtampe.David2.Common.Artist", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("Igtampe.David2.Common.User", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Characters");

                    b.Navigation("Commissions");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
